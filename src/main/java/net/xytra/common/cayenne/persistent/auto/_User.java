package net.xytra.common.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import net.xytra.common.cayenne.persistent.AbstractModifiable;
import net.xytra.common.cayenne.persistent.User;
import net.xytra.common.cayenne.persistent.UserPreference;

/**
 * Class _User was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _User extends AbstractModifiable {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<Date> CREATED_DTM = Property.create("createdDtm", Date.class);
    public static final Property<String> DISPLAYED_NAME = Property.create("displayedName", String.class);
    public static final Property<String> EMAIL_ADDRESS = Property.create("emailAddress", String.class);
    public static final Property<Date> MODIFIED_DTM = Property.create("modifiedDtm", Date.class);
    public static final Property<String> PASSWORD = Property.create("password", String.class);
    public static final Property<String> USERNAME = Property.create("username", String.class);
    public static final Property<User> USER_CREATED = Property.create("userCreated", User.class);
    public static final Property<User> USER_MODIFIED = Property.create("userModified", User.class);
    public static final Property<List<UserPreference>> USER_PREFERENCES = Property.create("userPreferences", List.class);

    protected Date createdDtm;
    protected String displayedName;
    protected String emailAddress;
    protected Date modifiedDtm;
    protected String password;
    protected String username;

    protected Object userCreated;
    protected Object userModified;
    protected Object userPreferences;

    public void setCreatedDtm(Date createdDtm) {
        beforePropertyWrite("createdDtm", this.createdDtm, createdDtm);
        this.createdDtm = createdDtm;
    }

    public Date getCreatedDtm() {
        beforePropertyRead("createdDtm");
        return this.createdDtm;
    }

    public void setDisplayedName(String displayedName) {
        beforePropertyWrite("displayedName", this.displayedName, displayedName);
        this.displayedName = displayedName;
    }

    public String getDisplayedName() {
        beforePropertyRead("displayedName");
        return this.displayedName;
    }

    public void setEmailAddress(String emailAddress) {
        beforePropertyWrite("emailAddress", this.emailAddress, emailAddress);
        this.emailAddress = emailAddress;
    }

    public String getEmailAddress() {
        beforePropertyRead("emailAddress");
        return this.emailAddress;
    }

    public void setModifiedDtm(Date modifiedDtm) {
        beforePropertyWrite("modifiedDtm", this.modifiedDtm, modifiedDtm);
        this.modifiedDtm = modifiedDtm;
    }

    public Date getModifiedDtm() {
        beforePropertyRead("modifiedDtm");
        return this.modifiedDtm;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void setUsername(String username) {
        beforePropertyWrite("username", this.username, username);
        this.username = username;
    }

    public String getUsername() {
        beforePropertyRead("username");
        return this.username;
    }

    public void setUserCreated(User userCreated) {
        setToOneTarget("userCreated", userCreated, true);
    }

    public User getUserCreated() {
        return (User)readProperty("userCreated");
    }

    public void setUserModified(User userModified) {
        setToOneTarget("userModified", userModified, true);
    }

    public User getUserModified() {
        return (User)readProperty("userModified");
    }

    public void addToUserPreferences(UserPreference obj) {
        addToManyTarget("userPreferences", obj, true);
    }

    public void removeFromUserPreferences(UserPreference obj) {
        removeToManyTarget("userPreferences", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<UserPreference> getUserPreferences() {
        return (List<UserPreference>)readProperty("userPreferences");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "createdDtm":
                return this.createdDtm;
            case "displayedName":
                return this.displayedName;
            case "emailAddress":
                return this.emailAddress;
            case "modifiedDtm":
                return this.modifiedDtm;
            case "password":
                return this.password;
            case "username":
                return this.username;
            case "userCreated":
                return this.userCreated;
            case "userModified":
                return this.userModified;
            case "userPreferences":
                return this.userPreferences;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "createdDtm":
                this.createdDtm = (Date)val;
                break;
            case "displayedName":
                this.displayedName = (String)val;
                break;
            case "emailAddress":
                this.emailAddress = (String)val;
                break;
            case "modifiedDtm":
                this.modifiedDtm = (Date)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "username":
                this.username = (String)val;
                break;
            case "userCreated":
                this.userCreated = val;
                break;
            case "userModified":
                this.userModified = val;
                break;
            case "userPreferences":
                this.userPreferences = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.createdDtm);
        out.writeObject(this.displayedName);
        out.writeObject(this.emailAddress);
        out.writeObject(this.modifiedDtm);
        out.writeObject(this.password);
        out.writeObject(this.username);
        out.writeObject(this.userCreated);
        out.writeObject(this.userModified);
        out.writeObject(this.userPreferences);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.createdDtm = (Date)in.readObject();
        this.displayedName = (String)in.readObject();
        this.emailAddress = (String)in.readObject();
        this.modifiedDtm = (Date)in.readObject();
        this.password = (String)in.readObject();
        this.username = (String)in.readObject();
        this.userCreated = in.readObject();
        this.userModified = in.readObject();
        this.userPreferences = in.readObject();
    }

}
