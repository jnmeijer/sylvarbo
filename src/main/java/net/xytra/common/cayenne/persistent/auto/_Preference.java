package net.xytra.common.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Preference was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Preference extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> DEFAULT_VALUE = Property.create("defaultValue", String.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<String> KEY = Property.create("key", String.class);

    protected String defaultValue;
    protected String description;
    protected String key;


    public void setDefaultValue(String defaultValue) {
        beforePropertyWrite("defaultValue", this.defaultValue, defaultValue);
        this.defaultValue = defaultValue;
    }

    public String getDefaultValue() {
        beforePropertyRead("defaultValue");
        return this.defaultValue;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setKey(String key) {
        beforePropertyWrite("key", this.key, key);
        this.key = key;
    }

    public String getKey() {
        beforePropertyRead("key");
        return this.key;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "defaultValue":
                return this.defaultValue;
            case "description":
                return this.description;
            case "key":
                return this.key;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "defaultValue":
                this.defaultValue = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "key":
                this.key = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.defaultValue);
        out.writeObject(this.description);
        out.writeObject(this.key);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.defaultValue = (String)in.readObject();
        this.description = (String)in.readObject();
        this.key = (String)in.readObject();
    }

}
