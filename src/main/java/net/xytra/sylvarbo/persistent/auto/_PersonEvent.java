package net.xytra.sylvarbo.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.Property;

import net.xytra.common.cayenne.persistent.AbstractPersistentWithId;
import net.xytra.sylvarbo.persistent.Person;

/**
 * Class _PersonEvent was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PersonEvent extends AbstractPersistentWithId {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> APPROXIMATION = Property.create("approximation", String.class);
    public static final Property<Long> DTM = Property.create("dtm", Long.class);
    public static final Property<String> LOCATION_DESC = Property.create("locationDesc", String.class);
    public static final Property<String> PRECISION = Property.create("precision", String.class);
    public static final Property<String> TYPE = Property.create("type", String.class);
    public static final Property<Person> PERSON = Property.create("person", Person.class);

    protected String approximation;
    protected long dtm;
    protected String locationDesc;
    protected String precision;
    protected String type;

    protected Object person;

    public void setApproximation(String approximation) {
        beforePropertyWrite("approximation", this.approximation, approximation);
        this.approximation = approximation;
    }

    public String getApproximation() {
        beforePropertyRead("approximation");
        return this.approximation;
    }

    public void setDtm(long dtm) {
        beforePropertyWrite("dtm", this.dtm, dtm);
        this.dtm = dtm;
    }

    public long getDtm() {
        beforePropertyRead("dtm");
        return this.dtm;
    }

    public void setLocationDesc(String locationDesc) {
        beforePropertyWrite("locationDesc", this.locationDesc, locationDesc);
        this.locationDesc = locationDesc;
    }

    public String getLocationDesc() {
        beforePropertyRead("locationDesc");
        return this.locationDesc;
    }

    public void setPrecision(String precision) {
        beforePropertyWrite("precision", this.precision, precision);
        this.precision = precision;
    }

    public String getPrecision() {
        beforePropertyRead("precision");
        return this.precision;
    }

    public void setType(String type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public String getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void setPerson(Person person) {
        setToOneTarget("person", person, true);
    }

    public Person getPerson() {
        return (Person)readProperty("person");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "approximation":
                return this.approximation;
            case "dtm":
                return this.dtm;
            case "locationDesc":
                return this.locationDesc;
            case "precision":
                return this.precision;
            case "type":
                return this.type;
            case "person":
                return this.person;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "approximation":
                this.approximation = (String)val;
                break;
            case "dtm":
                this.dtm = val == null ? 0 : (long)val;
                break;
            case "locationDesc":
                this.locationDesc = (String)val;
                break;
            case "precision":
                this.precision = (String)val;
                break;
            case "type":
                this.type = (String)val;
                break;
            case "person":
                this.person = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.approximation);
        out.writeLong(this.dtm);
        out.writeObject(this.locationDesc);
        out.writeObject(this.precision);
        out.writeObject(this.type);
        out.writeObject(this.person);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.approximation = (String)in.readObject();
        this.dtm = in.readLong();
        this.locationDesc = (String)in.readObject();
        this.precision = (String)in.readObject();
        this.type = (String)in.readObject();
        this.person = in.readObject();
    }

}
