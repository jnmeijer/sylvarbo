package net.xytra.sylvarbo.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import net.xytra.common.cayenne.persistent.User;
import net.xytra.sylvarbo.persistent.Person;

/**
 * Class _PersonReference was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PersonReference extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<Date> CREATED_DTM = Property.create("createdDtm", Date.class);
    public static final Property<String> EXCERPT = Property.create("excerpt", String.class);
    public static final Property<String> LOCATION_IN_DOC = Property.create("locationInDoc", String.class);
    public static final Property<Date> MODIFIED_DTM = Property.create("modifiedDtm", Date.class);
    public static final Property<String> ORIGINAL_URL = Property.create("originalUrl", String.class);
    public static final Property<Person> PERSON = Property.create("person", Person.class);
    public static final Property<User> USER_CREATED = Property.create("userCreated", User.class);
    public static final Property<User> USER_MODIFIED = Property.create("userModified", User.class);

    protected Date createdDtm;
    protected String excerpt;
    protected String locationInDoc;
    protected Date modifiedDtm;
    protected String originalUrl;

    protected Object person;
    protected Object userCreated;
    protected Object userModified;

    public void setCreatedDtm(Date createdDtm) {
        beforePropertyWrite("createdDtm", this.createdDtm, createdDtm);
        this.createdDtm = createdDtm;
    }

    public Date getCreatedDtm() {
        beforePropertyRead("createdDtm");
        return this.createdDtm;
    }

    public void setExcerpt(String excerpt) {
        beforePropertyWrite("excerpt", this.excerpt, excerpt);
        this.excerpt = excerpt;
    }

    public String getExcerpt() {
        beforePropertyRead("excerpt");
        return this.excerpt;
    }

    public void setLocationInDoc(String locationInDoc) {
        beforePropertyWrite("locationInDoc", this.locationInDoc, locationInDoc);
        this.locationInDoc = locationInDoc;
    }

    public String getLocationInDoc() {
        beforePropertyRead("locationInDoc");
        return this.locationInDoc;
    }

    public void setModifiedDtm(Date modifiedDtm) {
        beforePropertyWrite("modifiedDtm", this.modifiedDtm, modifiedDtm);
        this.modifiedDtm = modifiedDtm;
    }

    public Date getModifiedDtm() {
        beforePropertyRead("modifiedDtm");
        return this.modifiedDtm;
    }

    public void setOriginalUrl(String originalUrl) {
        beforePropertyWrite("originalUrl", this.originalUrl, originalUrl);
        this.originalUrl = originalUrl;
    }

    public String getOriginalUrl() {
        beforePropertyRead("originalUrl");
        return this.originalUrl;
    }

    public void setPerson(Person person) {
        setToOneTarget("person", person, true);
    }

    public Person getPerson() {
        return (Person)readProperty("person");
    }

    public void setUserCreated(User userCreated) {
        setToOneTarget("userCreated", userCreated, true);
    }

    public User getUserCreated() {
        return (User)readProperty("userCreated");
    }

    public void setUserModified(User userModified) {
        setToOneTarget("userModified", userModified, true);
    }

    public User getUserModified() {
        return (User)readProperty("userModified");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "createdDtm":
                return this.createdDtm;
            case "excerpt":
                return this.excerpt;
            case "locationInDoc":
                return this.locationInDoc;
            case "modifiedDtm":
                return this.modifiedDtm;
            case "originalUrl":
                return this.originalUrl;
            case "person":
                return this.person;
            case "userCreated":
                return this.userCreated;
            case "userModified":
                return this.userModified;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "createdDtm":
                this.createdDtm = (Date)val;
                break;
            case "excerpt":
                this.excerpt = (String)val;
                break;
            case "locationInDoc":
                this.locationInDoc = (String)val;
                break;
            case "modifiedDtm":
                this.modifiedDtm = (Date)val;
                break;
            case "originalUrl":
                this.originalUrl = (String)val;
                break;
            case "person":
                this.person = val;
                break;
            case "userCreated":
                this.userCreated = val;
                break;
            case "userModified":
                this.userModified = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.createdDtm);
        out.writeObject(this.excerpt);
        out.writeObject(this.locationInDoc);
        out.writeObject(this.modifiedDtm);
        out.writeObject(this.originalUrl);
        out.writeObject(this.person);
        out.writeObject(this.userCreated);
        out.writeObject(this.userModified);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.createdDtm = (Date)in.readObject();
        this.excerpt = (String)in.readObject();
        this.locationInDoc = (String)in.readObject();
        this.modifiedDtm = (Date)in.readObject();
        this.originalUrl = (String)in.readObject();
        this.person = in.readObject();
        this.userCreated = in.readObject();
        this.userModified = in.readObject();
    }

}
