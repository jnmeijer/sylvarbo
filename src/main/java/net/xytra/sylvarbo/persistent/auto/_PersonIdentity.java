package net.xytra.sylvarbo.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import net.xytra.sylvarbo.persistent.Person;
import net.xytra.sylvarbo.persistent.PersonName;

/**
 * Class _PersonIdentity was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PersonIdentity extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<Long> END_DATE = Property.create("endDate", Long.class);
    public static final Property<Long> START_DATE = Property.create("startDate", Long.class);
    public static final Property<Person> PERSON = Property.create("person", Person.class);
    public static final Property<List<PersonName>> PERSON_NAMES = Property.create("personNames", List.class);

    protected Long endDate;
    protected Long startDate;

    protected Object person;
    protected Object personNames;

    public void setEndDate(long endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public long getEndDate() {
        beforePropertyRead("endDate");
        if(this.endDate == null) {
            return 0;
        }
        return this.endDate;
    }

    public void setStartDate(long startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public long getStartDate() {
        beforePropertyRead("startDate");
        if(this.startDate == null) {
            return 0;
        }
        return this.startDate;
    }

    public void setPerson(Person person) {
        setToOneTarget("person", person, true);
    }

    public Person getPerson() {
        return (Person)readProperty("person");
    }

    public void addToPersonNames(PersonName obj) {
        addToManyTarget("personNames", obj, true);
    }

    public void removeFromPersonNames(PersonName obj) {
        removeToManyTarget("personNames", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PersonName> getPersonNames() {
        return (List<PersonName>)readProperty("personNames");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "endDate":
                return this.endDate;
            case "startDate":
                return this.startDate;
            case "person":
                return this.person;
            case "personNames":
                return this.personNames;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "endDate":
                this.endDate = (Long)val;
                break;
            case "startDate":
                this.startDate = (Long)val;
                break;
            case "person":
                this.person = val;
                break;
            case "personNames":
                this.personNames = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.endDate);
        out.writeObject(this.startDate);
        out.writeObject(this.person);
        out.writeObject(this.personNames);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.endDate = (Long)in.readObject();
        this.startDate = (Long)in.readObject();
        this.person = in.readObject();
        this.personNames = in.readObject();
    }

}
