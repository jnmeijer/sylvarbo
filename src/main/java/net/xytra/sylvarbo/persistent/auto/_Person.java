package net.xytra.sylvarbo.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.exp.Property;

import net.xytra.common.cayenne.persistent.AbstractPersistentWithId;
import net.xytra.sylvarbo.persistent.PersonEvent;
import net.xytra.sylvarbo.persistent.PersonIdentity;
import net.xytra.sylvarbo.persistent.Relationship;

/**
 * Class _Person was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Person extends AbstractPersistentWithId {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<List<PersonEvent>> EVENTS = Property.create("events", List.class);
    public static final Property<List<PersonIdentity>> IDENTITIES = Property.create("identities", List.class);
    public static final Property<PersonIdentity> PRIMARY_IDENTITY = Property.create("primaryIdentity", PersonIdentity.class);
    public static final Property<Relationship> RELATIONSHIP_AS_CHILD = Property.create("relationshipAsChild", Relationship.class);
    public static final Property<List<Relationship>> RELATIONSHIPS_AS_PRIMARY = Property.create("relationshipsAsPrimary", List.class);
    public static final Property<List<Relationship>> RELATIONSHIPS_AS_SECONDARY = Property.create("relationshipsAsSecondary", List.class);


    protected Object events;
    protected Object identities;
    protected Object primaryIdentity;
    protected Object relationshipAsChild;
    protected Object relationshipsAsPrimary;
    protected Object relationshipsAsSecondary;

    public void addToEvents(PersonEvent obj) {
        addToManyTarget("events", obj, true);
    }

    public void removeFromEvents(PersonEvent obj) {
        removeToManyTarget("events", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PersonEvent> getEvents() {
        return (List<PersonEvent>)readProperty("events");
    }

    public void addToIdentities(PersonIdentity obj) {
        addToManyTarget("identities", obj, true);
    }

    public void removeFromIdentities(PersonIdentity obj) {
        removeToManyTarget("identities", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PersonIdentity> getIdentities() {
        return (List<PersonIdentity>)readProperty("identities");
    }

    public void setPrimaryIdentity(PersonIdentity primaryIdentity) {
        setToOneTarget("primaryIdentity", primaryIdentity, true);
    }

    public PersonIdentity getPrimaryIdentity() {
        return (PersonIdentity)readProperty("primaryIdentity");
    }

    public void setRelationshipAsChild(Relationship relationshipAsChild) {
        setToOneTarget("relationshipAsChild", relationshipAsChild, true);
    }

    public Relationship getRelationshipAsChild() {
        return (Relationship)readProperty("relationshipAsChild");
    }

    public void addToRelationshipsAsPrimary(Relationship obj) {
        addToManyTarget("relationshipsAsPrimary", obj, true);
    }

    public void removeFromRelationshipsAsPrimary(Relationship obj) {
        removeToManyTarget("relationshipsAsPrimary", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Relationship> getRelationshipsAsPrimary() {
        return (List<Relationship>)readProperty("relationshipsAsPrimary");
    }

    public void addToRelationshipsAsSecondary(Relationship obj) {
        addToManyTarget("relationshipsAsSecondary", obj, true);
    }

    public void removeFromRelationshipsAsSecondary(Relationship obj) {
        removeToManyTarget("relationshipsAsSecondary", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Relationship> getRelationshipsAsSecondary() {
        return (List<Relationship>)readProperty("relationshipsAsSecondary");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "events":
                return this.events;
            case "identities":
                return this.identities;
            case "primaryIdentity":
                return this.primaryIdentity;
            case "relationshipAsChild":
                return this.relationshipAsChild;
            case "relationshipsAsPrimary":
                return this.relationshipsAsPrimary;
            case "relationshipsAsSecondary":
                return this.relationshipsAsSecondary;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "events":
                this.events = val;
                break;
            case "identities":
                this.identities = val;
                break;
            case "primaryIdentity":
                this.primaryIdentity = val;
                break;
            case "relationshipAsChild":
                this.relationshipAsChild = val;
                break;
            case "relationshipsAsPrimary":
                this.relationshipsAsPrimary = val;
                break;
            case "relationshipsAsSecondary":
                this.relationshipsAsSecondary = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.events);
        out.writeObject(this.identities);
        out.writeObject(this.primaryIdentity);
        out.writeObject(this.relationshipAsChild);
        out.writeObject(this.relationshipsAsPrimary);
        out.writeObject(this.relationshipsAsSecondary);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.events = in.readObject();
        this.identities = in.readObject();
        this.primaryIdentity = in.readObject();
        this.relationshipAsChild = in.readObject();
        this.relationshipsAsPrimary = in.readObject();
        this.relationshipsAsSecondary = in.readObject();
    }

}
