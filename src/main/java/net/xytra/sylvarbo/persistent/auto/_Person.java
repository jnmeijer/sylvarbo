package net.xytra.sylvarbo.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.cayenne.exp.Property;

import net.xytra.common.cayenne.persistent.AbstractModifiable;
import net.xytra.common.cayenne.persistent.User;
import net.xytra.sylvarbo.persistent.PersonEvent;
import net.xytra.sylvarbo.persistent.PersonIdentity;
import net.xytra.sylvarbo.persistent.PersonReference;
import net.xytra.sylvarbo.persistent.Relationship;

/**
 * Class _Person was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Person extends AbstractModifiable {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> ADDITIONAL_INFO = Property.create("additionalInfo", String.class);
    public static final Property<Date> CREATED_DTM = Property.create("createdDtm", Date.class);
    public static final Property<String> GENDER = Property.create("gender", String.class);
    public static final Property<String> GENDER_DESC = Property.create("genderDesc", String.class);
    public static final Property<Date> MODIFIED_DTM = Property.create("modifiedDtm", Date.class);
    public static final Property<Map<Object, PersonEvent>> EVENTS = Property.create("events", Map.class);
    public static final Property<List<PersonIdentity>> IDENTITIES = Property.create("identities", List.class);
    public static final Property<List<PersonReference>> PERSON_REFERENCES = Property.create("personReferences", List.class);
    public static final Property<PersonIdentity> PRIMARY_IDENTITY = Property.create("primaryIdentity", PersonIdentity.class);
    public static final Property<Relationship> RELATIONSHIP_AS_CHILD = Property.create("relationshipAsChild", Relationship.class);
    public static final Property<List<Relationship>> RELATIONSHIPS_AS_PRIMARY = Property.create("relationshipsAsPrimary", List.class);
    public static final Property<List<Relationship>> RELATIONSHIPS_AS_SECONDARY = Property.create("relationshipsAsSecondary", List.class);
    public static final Property<User> USER_CREATED = Property.create("userCreated", User.class);
    public static final Property<User> USER_MODIFIED = Property.create("userModified", User.class);

    protected String additionalInfo;
    protected Date createdDtm;
    protected String gender;
    protected String genderDesc;
    protected Date modifiedDtm;

    protected Object events;
    protected Object identities;
    protected Object personReferences;
    protected Object primaryIdentity;
    protected Object relationshipAsChild;
    protected Object relationshipsAsPrimary;
    protected Object relationshipsAsSecondary;
    protected Object userCreated;
    protected Object userModified;

    public void setAdditionalInfo(String additionalInfo) {
        beforePropertyWrite("additionalInfo", this.additionalInfo, additionalInfo);
        this.additionalInfo = additionalInfo;
    }

    public String getAdditionalInfo() {
        beforePropertyRead("additionalInfo");
        return this.additionalInfo;
    }

    public void setCreatedDtm(Date createdDtm) {
        beforePropertyWrite("createdDtm", this.createdDtm, createdDtm);
        this.createdDtm = createdDtm;
    }

    public Date getCreatedDtm() {
        beforePropertyRead("createdDtm");
        return this.createdDtm;
    }

    public void setGender(String gender) {
        beforePropertyWrite("gender", this.gender, gender);
        this.gender = gender;
    }

    public String getGender() {
        beforePropertyRead("gender");
        return this.gender;
    }

    public void setGenderDesc(String genderDesc) {
        beforePropertyWrite("genderDesc", this.genderDesc, genderDesc);
        this.genderDesc = genderDesc;
    }

    public String getGenderDesc() {
        beforePropertyRead("genderDesc");
        return this.genderDesc;
    }

    public void setModifiedDtm(Date modifiedDtm) {
        beforePropertyWrite("modifiedDtm", this.modifiedDtm, modifiedDtm);
        this.modifiedDtm = modifiedDtm;
    }

    public Date getModifiedDtm() {
        beforePropertyRead("modifiedDtm");
        return this.modifiedDtm;
    }

    public void addToEvents(PersonEvent obj) {
        addToManyTarget("events", obj, true);
    }

    public void removeFromEvents(PersonEvent obj) {
        removeToManyTarget("events", obj, true);
    }

    @SuppressWarnings("unchecked")
    public Map<Object, PersonEvent> getEvents() {
        return (Map<Object, PersonEvent>)readProperty("events");
    }

    public void addToIdentities(PersonIdentity obj) {
        addToManyTarget("identities", obj, true);
    }

    public void removeFromIdentities(PersonIdentity obj) {
        removeToManyTarget("identities", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PersonIdentity> getIdentities() {
        return (List<PersonIdentity>)readProperty("identities");
    }

    public void addToPersonReferences(PersonReference obj) {
        addToManyTarget("personReferences", obj, true);
    }

    public void removeFromPersonReferences(PersonReference obj) {
        removeToManyTarget("personReferences", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PersonReference> getPersonReferences() {
        return (List<PersonReference>)readProperty("personReferences");
    }

    public void setPrimaryIdentity(PersonIdentity primaryIdentity) {
        setToOneTarget("primaryIdentity", primaryIdentity, true);
    }

    public PersonIdentity getPrimaryIdentity() {
        return (PersonIdentity)readProperty("primaryIdentity");
    }

    public void setRelationshipAsChild(Relationship relationshipAsChild) {
        setToOneTarget("relationshipAsChild", relationshipAsChild, true);
    }

    public Relationship getRelationshipAsChild() {
        return (Relationship)readProperty("relationshipAsChild");
    }

    public void addToRelationshipsAsPrimary(Relationship obj) {
        addToManyTarget("relationshipsAsPrimary", obj, true);
    }

    public void removeFromRelationshipsAsPrimary(Relationship obj) {
        removeToManyTarget("relationshipsAsPrimary", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Relationship> getRelationshipsAsPrimary() {
        return (List<Relationship>)readProperty("relationshipsAsPrimary");
    }

    public void addToRelationshipsAsSecondary(Relationship obj) {
        addToManyTarget("relationshipsAsSecondary", obj, true);
    }

    public void removeFromRelationshipsAsSecondary(Relationship obj) {
        removeToManyTarget("relationshipsAsSecondary", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Relationship> getRelationshipsAsSecondary() {
        return (List<Relationship>)readProperty("relationshipsAsSecondary");
    }

    public void setUserCreated(User userCreated) {
        setToOneTarget("userCreated", userCreated, true);
    }

    public User getUserCreated() {
        return (User)readProperty("userCreated");
    }

    public void setUserModified(User userModified) {
        setToOneTarget("userModified", userModified, true);
    }

    public User getUserModified() {
        return (User)readProperty("userModified");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "additionalInfo":
                return this.additionalInfo;
            case "createdDtm":
                return this.createdDtm;
            case "gender":
                return this.gender;
            case "genderDesc":
                return this.genderDesc;
            case "modifiedDtm":
                return this.modifiedDtm;
            case "events":
                return this.events;
            case "identities":
                return this.identities;
            case "personReferences":
                return this.personReferences;
            case "primaryIdentity":
                return this.primaryIdentity;
            case "relationshipAsChild":
                return this.relationshipAsChild;
            case "relationshipsAsPrimary":
                return this.relationshipsAsPrimary;
            case "relationshipsAsSecondary":
                return this.relationshipsAsSecondary;
            case "userCreated":
                return this.userCreated;
            case "userModified":
                return this.userModified;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "additionalInfo":
                this.additionalInfo = (String)val;
                break;
            case "createdDtm":
                this.createdDtm = (Date)val;
                break;
            case "gender":
                this.gender = (String)val;
                break;
            case "genderDesc":
                this.genderDesc = (String)val;
                break;
            case "modifiedDtm":
                this.modifiedDtm = (Date)val;
                break;
            case "events":
                this.events = val;
                break;
            case "identities":
                this.identities = val;
                break;
            case "personReferences":
                this.personReferences = val;
                break;
            case "primaryIdentity":
                this.primaryIdentity = val;
                break;
            case "relationshipAsChild":
                this.relationshipAsChild = val;
                break;
            case "relationshipsAsPrimary":
                this.relationshipsAsPrimary = val;
                break;
            case "relationshipsAsSecondary":
                this.relationshipsAsSecondary = val;
                break;
            case "userCreated":
                this.userCreated = val;
                break;
            case "userModified":
                this.userModified = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.additionalInfo);
        out.writeObject(this.createdDtm);
        out.writeObject(this.gender);
        out.writeObject(this.genderDesc);
        out.writeObject(this.modifiedDtm);
        out.writeObject(this.events);
        out.writeObject(this.identities);
        out.writeObject(this.personReferences);
        out.writeObject(this.primaryIdentity);
        out.writeObject(this.relationshipAsChild);
        out.writeObject(this.relationshipsAsPrimary);
        out.writeObject(this.relationshipsAsSecondary);
        out.writeObject(this.userCreated);
        out.writeObject(this.userModified);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.additionalInfo = (String)in.readObject();
        this.createdDtm = (Date)in.readObject();
        this.gender = (String)in.readObject();
        this.genderDesc = (String)in.readObject();
        this.modifiedDtm = (Date)in.readObject();
        this.events = in.readObject();
        this.identities = in.readObject();
        this.personReferences = in.readObject();
        this.primaryIdentity = in.readObject();
        this.relationshipAsChild = in.readObject();
        this.relationshipsAsPrimary = in.readObject();
        this.relationshipsAsSecondary = in.readObject();
        this.userCreated = in.readObject();
        this.userModified = in.readObject();
    }

}
