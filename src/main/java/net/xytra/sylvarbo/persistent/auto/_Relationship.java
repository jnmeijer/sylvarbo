package net.xytra.sylvarbo.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.exp.Property;

import net.xytra.common.cayenne.persistent.AbstractPersistentWithId;
import net.xytra.sylvarbo.persistent.Person;
import net.xytra.sylvarbo.persistent.RelationshipEvent;

/**
 * Class _Relationship was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Relationship extends AbstractPersistentWithId {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> TYPE = Property.create("type", String.class);
    public static final Property<List<Person>> CHILDREN = Property.create("children", List.class);
    public static final Property<List<RelationshipEvent>> EVENTS = Property.create("events", List.class);
    public static final Property<Person> PRIMARY_PARENT = Property.create("primaryParent", Person.class);
    public static final Property<Person> SECONDARY_PARENT = Property.create("secondaryParent", Person.class);

    protected String type;

    protected Object children;
    protected Object events;
    protected Object primaryParent;
    protected Object secondaryParent;

    public void setType(String type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public String getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void addToChildren(Person obj) {
        addToManyTarget("children", obj, true);
    }

    public void removeFromChildren(Person obj) {
        removeToManyTarget("children", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Person> getChildren() {
        return (List<Person>)readProperty("children");
    }

    public void addToEvents(RelationshipEvent obj) {
        addToManyTarget("events", obj, true);
    }

    public void removeFromEvents(RelationshipEvent obj) {
        removeToManyTarget("events", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<RelationshipEvent> getEvents() {
        return (List<RelationshipEvent>)readProperty("events");
    }

    public void setPrimaryParent(Person primaryParent) {
        setToOneTarget("primaryParent", primaryParent, true);
    }

    public Person getPrimaryParent() {
        return (Person)readProperty("primaryParent");
    }

    public void setSecondaryParent(Person secondaryParent) {
        setToOneTarget("secondaryParent", secondaryParent, true);
    }

    public Person getSecondaryParent() {
        return (Person)readProperty("secondaryParent");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "type":
                return this.type;
            case "children":
                return this.children;
            case "events":
                return this.events;
            case "primaryParent":
                return this.primaryParent;
            case "secondaryParent":
                return this.secondaryParent;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "type":
                this.type = (String)val;
                break;
            case "children":
                this.children = val;
                break;
            case "events":
                this.events = val;
                break;
            case "primaryParent":
                this.primaryParent = val;
                break;
            case "secondaryParent":
                this.secondaryParent = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.type);
        out.writeObject(this.children);
        out.writeObject(this.events);
        out.writeObject(this.primaryParent);
        out.writeObject(this.secondaryParent);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.type = (String)in.readObject();
        this.children = in.readObject();
        this.events = in.readObject();
        this.primaryParent = in.readObject();
        this.secondaryParent = in.readObject();
    }

}
